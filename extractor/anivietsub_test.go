package extractor

import (
	"bytes"
	"net/http"
	"net/http/httptest"
	"reflect"
	"strings"
	"testing"
)

func TestNewAniVietSubExtractor(t *testing.T) {
	tests := []struct {
		name    string
		base    string
		wantErr bool
	}{
		{
			name:    "valid base URL",
			base:    "https://example.com",
			wantErr: false,
		},
		{
			name:    "empty base URL",
			base:    "",
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewAniVietSubExtractor(tt.base)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewAniVietSubExtractor() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got == nil {
				t.Error("NewAniVietSubExtractor() returned nil")
				return
			}
			if got.domain != tt.base {
				t.Errorf("NewAniVietSubExtractor() domain = %v, want %v", got.domain, tt.base)
			}
			if got.client == nil {
				t.Error("NewAniVietSubExtractor() client is nil")
			}
		})
	}
}

func TestAniVietSubExtractorSearch(t *testing.T) {
	tests := []struct {
		name       string
		query      string
		serverResp string
		statusCode int
		want       []Movie
		wantErr    bool
	}{
		{
			name:       "successful search with results",
			query:      "test movie",
			statusCode: http.StatusOK,
			serverResp: `<ul>
				<li><a class="ss-title" href="/phim-123">Movie 1</a></li>
				<li><a class="ss-title" href="/phim-456">Movie 2</a></li>
			</ul>`,
			want: []Movie{
				{Id: 123, Title: "Movie 1", Href: "/phim-123"},
				{Id: 456, Title: "Movie 2", Href: "/phim-456"},
			},
			wantErr: false,
		},
		{
			name:       "empty search results",
			query:      "nonexistent",
			statusCode: http.StatusOK,
			serverResp: `<ul></ul>`,
			want:       []Movie{},
			wantErr:    false,
		},
		{
			name:       "server error",
			query:      "test",
			statusCode: http.StatusInternalServerError,
			serverResp: "",
			want:       nil,
			wantErr:    true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				if r.URL.Path != SEARCH_API {
					t.Errorf("Expected path %s, got %s", SEARCH_API, r.URL.Path)
				}
				w.WriteHeader(tt.statusCode)
				w.Write([]byte(tt.serverResp))
			}))
			defer server.Close()

			ex, _ := NewAniVietSubExtractor(server.URL)
			got, err := ex.Search(tt.query)
			if (err != nil) != tt.wantErr {
				t.Errorf("Search() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Search() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAniVietSubExtractorGet(t *testing.T) {
	tests := []struct {
		name       string
		movieId    int
		serverResp string
		want       *Movie
		wantErr    bool
	}{
		{
			name:    "successful get movie",
			movieId: 123,
			serverResp: `<!DOCTYPE html>
<html>
<head>
	<meta property="og:url" content="https://example.com/phim-123">
</head>
<body>
	<article class="TPost">
		<h1 class="Title">Test Movie</h1>
		<h2 class="SubTitle">Subtitle</h2>
		<div class="Description">Description text</div>
		<span class="Time">24/24</span>
		<div id="TPVotes" data-percent="85"></div>
	</article>
	<div id="list-server">
		<ul>
			<li class="episode"><a class="btn-episode" title="Episode 1" href="/ep1" data-hash="hash1"></a></li>
			<li class="episode"><a class="btn-episode" title="Episode 2" href="/ep2" data-hash="hash2"></a></li>
		</ul>
	</div>
</body>
</html>`,
			want: &Movie{
				Id:            123,
				Title:         "Test Movie",
				Subtitle:      "Subtitle",
				Description:   "Description text",
				Rating:        8.5,
				Href:          "https://example.com/phim-123",
				TotalEpisodes: "24/24",
				Episodes: []Episode{
					{MovieId: 123, Title: "Episode 1", Href: "/ep1", Hash: "hash1"},
					{MovieId: 123, Title: "Episode 2", Href: "/ep2", Hash: "hash2"},
				},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusOK)
				w.Write([]byte(tt.serverResp))
			}))
			defer server.Close()

			ex, _ := NewAniVietSubExtractor(server.URL)
			got, err := ex.Get(tt.movieId)
			if (err != nil) != tt.wantErr {
				t.Errorf("Get() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Get() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestDecryptVideoSource(t *testing.T) {
	tests := []struct {
		name    string
		input   string
		wantErr bool
		want    string
	}{
		{
			name:    "invalid base64",
			input:   "not-valid-base64!!!",
			wantErr: true,
		},
		{
			name:    "empty string",
			input:   "",
			wantErr: true,
		},
		{
			name:    "normal case",
			input:   "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",
			wantErr: false,
			want:    "\"#EXTM3U",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			content, err := decryptVideoSource(tt.input)
			if (err != nil) != tt.wantErr {
				t.Errorf("decryptVideoSource() error = %v, wantErr %v", err, tt.wantErr)
			}

			if !bytes.HasPrefix(content, []byte(tt.want)) {
				t.Errorf("decryptVideoSource() result = %v, want %v", string(content[:10]), tt.want)
			}
		})
	}
}
func TestExtractMovies(t *testing.T) {
	// Move HTML to variable for better readability
	multipleMoviesHTML := `
<li>
    <a style="background-image: url('https://cdn.animevietsub.show/data/poster/2024/03/13/animevsub-x9Zrjw31Rq.jpg')" class="thumb" href="https://animevietsub.show/phim/bakuage-sentai-boonboomger-a5260/"></a>
    <div class="ss-info">
        <a href="https://animevietsub.show/phim/bakuage-sentai-boonboomger-a5260/" class="ss-title">Bakuage Sentai Boonboomger</a>
        <!--<p>Chiến đội Bộc thượng Boonboomger</p>-->
        <p>Full VietSub</p>
    </div>
    <div class="clearfix"></div>
</li>
<li>
    <a style="background-image: url('https://cdn.animevietsub.show/data/poster/2024/09/26/animevsub-KR4W3yOM4q.jpg')" class="thumb" href="https://animevietsub.show/phim/hitoribocchi-no-isekai-kouryaku-a5408/"></a>
    <div class="ss-info">
        <a href="https://animevietsub.show/phim/hitoribocchi-no-isekai-kouryaku-a5408/" class="ss-title">Hành Trình Cô Độc Nơi Dị Giới</a>
        <!--<p>Hitoribocchi no Isekai Kouryaku, Loner Life in Another World, Lonely Attack on the Different World</p>-->
        <p>Full VietSub</p>
    </div>
    <div class="clearfix"></div>
</li>
<li>
    <a style="background-image: url('https://cdn.animevietsub.show/data/poster/2024/04/08/animevsub-TFsrm3h47R.jpg')" class="thumb" href="https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-3rd-season-a5210/"></a>
    <div class="ss-info">
        <a href="https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-3rd-season-a5210/" class="ss-title">Công Tước Chết Chóc Và Cô Hầu Gái Của Cậu Mùa 3</a>
        <!--<p>Shinigami Bocchan to Kuro Maid 3rd Season, The Duke of Death and His Maid Season 3</p>-->
        <p>Full VietSub</p>
    </div>
    <div class="clearfix"></div>
</li>
<li>
    <a style="background-image: url('https://cdn.animevietsub.show/data/poster/2023/07/09/animevsub-yEiBHTTdSG.jpg')" class="thumb" href="https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-2nd-season-a4979/"></a>
    <div class="ss-info">
        <a href="https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-2nd-season-a4979/" class="ss-title">Công Tước Tử Thần Và Cô Hầu Gái Mùa 2</a>
        <!--<p>Công Tước Tử Thần Và Cô Hầu Gái SS2, Shinigami Bocchan to Kuro Maid 2nd Season, The Duke of Death and His Maid Season 2</p>-->
        <p>Full VietSub</p>
    </div>
    <div class="clearfix"></div>
</li>
<li>
    <a style="background-image: url('https://cdn.animevietsub.show/data/poster/2022/10/29/animevsub-wLMeN8zLPl.jpg')" class="thumb" href="https://animevietsub.show/phim/bocchi-the-rock-a4727/"></a>
    <div class="ss-info">
        <a href="https://animevietsub.show/phim/bocchi-the-rock-a4727/" class="ss-title">Bocchi the Rock!</a>
        <!--<p>Bocchi the Rock!</p>-->
        <p>Full VietSub</p>
    </div>
    <div class="clearfix"></div>
</li>
<li>
    <a style="background-image: url('https://cdn.animevietsub.show/data/poster/2021/06/12/animevsub-tsKRnpd2ZC.jpg')" class="thumb" href="https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-a4145/"></a>
    <div class="ss-info">
        <a href="https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-a4145/" class="ss-title">Công Tước Tử Thần Và Cô Hầu Gái</a>
        <!--<p>Shinigami Bocchan to Kuro Maid, The Duke of Death and His Maid, Young Master the Grim Reaper and the Black Maid</p>-->
        <p>Full VietSub</p>
    </div>
    <div class="clearfix"></div>
</li>
<li class="ss-bottom" style="padding: 0; border-bottom: none;">
    <a href="/tim-kiem/boc/" id="suggest-all">Enter để tìm kiếm</a>
</li>
`

	tests := []struct {
		name    string
		html    string
		want    []Movie
		wantErr bool
	}{
		{
			name: "extract multiple movies",
			html: multipleMoviesHTML,
			want: []Movie{
				{Id: 5260, Title: "Bakuage Sentai Boonboomger", Href: "https://animevietsub.show/phim/bakuage-sentai-boonboomger-a5260/"},
				{Id: 5408, Title: "Hành Trình Cô Độc Nơi Dị Giới", Href: "https://animevietsub.show/phim/hitoribocchi-no-isekai-kouryaku-a5408/"},
				{Id: 5210, Title: "Công Tước Chết Chóc Và Cô Hầu Gái Của Cậu Mùa 3", Href: "https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-3rd-season-a5210/"},
				{Id: 4979, Title: "Công Tước Tử Thần Và Cô Hầu Gái Mùa 2", Href: "https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-2nd-season-a4979/"},
				{Id: 4727, Title: "Bocchi the Rock!", Href: "https://animevietsub.show/phim/bocchi-the-rock-a4727/"},
				{Id: 4145, Title: "Công Tước Tử Thần Và Cô Hầu Gái", Href: "https://animevietsub.show/phim/shinigami-bocchan-to-kuro-maid-a4145/"},
			},
			wantErr: false,
		},
		{
			name:    "no movies",
			html:    `<ul></ul>`,
			want:    []Movie{},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := extractMovies(strings.NewReader(tt.html))
			if (err != nil) != tt.wantErr {
				t.Errorf("extractMovies() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("extractMovies() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestExtractLargestNumber(t *testing.T) {
	tests := []struct {
		name string
		text string
		want int
	}{
		{
			name: "single number",
			text: "phim-123",
			want: 123,
		},
		{
			name: "multiple numbers",
			text: "phim-45-episode-678",
			want: 678,
		},
		{
			name: "no numbers",
			text: "no-numbers-here",
			want: 0,
		},
		{
			name: "number at start",
			text: "999-phim",
			want: 999,
		},
		{
			name: "consecutive numbers",
			text: "123abc456def789",
			want: 789,
		},
		{
			name: "single digit",
			text: "episode-5",
			want: 5,
		},
		{
			name: "zero",
			text: "phim-0",
			want: 0,
		},
		{
			name: "large number",
			text: "id-123456789",
			want: 123456789,
		},
		{
			name: "empty string",
			text: "",
			want: 0,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := extractLargestNumber(tt.text); got != tt.want {
				t.Errorf("extractLargestNumber() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAniVietSubExtractorDownload(t *testing.T) {
	tests := []struct {
		name    string
		episode Episode
		wantErr bool
	}{
		{
			name: "download fails on playlist retrieval",
			episode: Episode{
				MovieId: 999,
				Hash:    "invalid-hash",
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusInternalServerError)
			}))
			defer server.Close()

			ex, _ := NewAniVietSubExtractor(server.URL)
			w := &bytes.Buffer{}
			err := ex.Download(tt.episode, w)
			if (err != nil) != tt.wantErr {
				t.Errorf("Download() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
